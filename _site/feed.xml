<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>周鹏的博客</title>
    <description>澹台宇鹏/@Roc Zhou</description>
    <link>http://localhost:4000/my-blog/</link>
    <atom:link href="http://localhost:4000/my-blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 May 2019 22:13:41 +0800</pubDate>
    <lastBuildDate>Fri, 24 May 2019 22:13:41 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>《何以为家》影评</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;和小麦公司小伙伴一起看的电影&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;正文&quot;&gt;正文&lt;/h4&gt;

&lt;p&gt;一部真实题材改编的电影，一句海报上简短的话概括全片：我要控告我的父母，因为他们生下了我。&lt;/p&gt;

&lt;p&gt;该片给我的第一印象并非各种泪目，反而是一种嘈杂，以及镜头的晃动带来的一丝眩晕。&lt;/p&gt;

&lt;p&gt;赞恩父母在无力抚养和教育的情况下依然持续生育，就像计划生育前的中国家庭。
比中国更糟糕的是，他们所处环境之差，连个睡觉的地方都没有，平常的口粮都需要窃之。&lt;/p&gt;

&lt;p&gt;在此环境下，赞恩的举止行为中都是大人的模样，看待事物也显的尤为成熟。&lt;/p&gt;

&lt;p&gt;虽然环境差亦，但不失亲情，对赞恩来说，妹妹是自己生活的支撑，也是唯一值得的留恋，处处为妹妹着想。包括扔掉街边商贩赠送的食物，妹妹第一次例假时，脱下自己的衣服为她遮挡，当被告知要把她卖给商贩时，想着赶紧带妹妹逃离。可惜依旧无法摆脱命运的捉弄，妹妹还是被带走了。&lt;/p&gt;

&lt;p&gt;难以想象赞恩此时内心多么的不舍，但还是有一种执念想要救回妹妹，而没有一气之下直接结束了自己的生命，他选择了逃离，逃离这个该死的家庭，逃离这个不待见自己的世界，追寻着妹妹而去。最后得知妹妹的离去，恨不得亲手杀了那个商贩，哪怕用自己的性命去换取也在所不惜。然而被限制的他只能眼睁睁的看着。&lt;/p&gt;

&lt;p&gt;最后在牢里，他选择了打电话，控告自己的父母，控告的不是他们卖了自己的妹妹，也不是他们没有给他教育等等，控告的是他们给了自己生命，给了让这个世界摧残的生命，可恨至极，倒不如不要来到这个世界。&lt;/p&gt;

&lt;p&gt;把生命带到了这个世界，却没有能力抚养，倒不如没有这个生命。很多东西需要自己量力而行，虽然人性本就是自私的，但人性本也是善良的。&lt;/p&gt;

&lt;p&gt;然后既然来到了这个世界，即便这个世界并不待见我，但也过好自己的一生，为了那点仅存的亲情也好，爱情也罢，都不要轻易放弃自己，只有自己才能摆脱世俗的看法，摆脱世界的不公，当自己都放弃了自己，那还能指望谁来安慰自己或者照顾自己想要照顾的那些人呢。好好活着，拼了命也不能让自己在乎的东西，在别人那里被糟蹋。&lt;/p&gt;

&lt;p&gt;愿我们每个人都被这个世界温柔以待~&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/05/11/capernaum/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/05/11/capernaum/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/05/11/capernaum/</guid>
        
        <category>影评</category>
        
        
      </item>
    
      <item>
        <title>js基础篇-3.高阶函数</title>
        <description>&lt;h1 id=&quot;js基础查漏补缺&quot;&gt;js基础查漏补缺&lt;/h1&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#js%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA&quot;&gt;js基础查漏补缺&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0&quot;&gt;高阶函数&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#map&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reduce&quot;&gt;reduce&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#filter&quot;&gt;filter&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0&quot;&gt;回调函数&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#sort&quot;&gt;sort&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%9C%80%E5%90%8E&quot;&gt;最后&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;高阶函数&quot;&gt;高阶函数&lt;/h2&gt;

&lt;p&gt;JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。&lt;/p&gt;

&lt;p&gt;一个最简单的高阶函数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(x, y, f) {
    return f(x) + f(y);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(x, y, f) {
    return f(x) + f(y);
}

var x = add(-5, 6, Math.abs); // 11
console.log(x);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;

&lt;p&gt;数组Array的一个方法，与es6 Map有所不同&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function pow(x) {
    return x * x;
}

var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
console.log(results);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reduce&quot;&gt;reduce&lt;/h3&gt;

&lt;p&gt;reduce也是Array的一个方法，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算。&lt;/p&gt;

&lt;p&gt;对一个array求和：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = [1, 3, 5, 7, 9];
arr.reduce(function (x, y) {
    return x + y;
}); // 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对一个array求积：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function product(arr) {
 const newArr =  arr.reduce(function (x, y) {
    return (x * y);
});

return newArr
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把[1, 3, 5, 7, 9]变换成整数13579：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = [1, 3, 5, 7, 9];
arr.reduce(function (x, y) {
    return x * 10 + y;
}); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filter&quot;&gt;filter&lt;/h3&gt;

&lt;p&gt;filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素&lt;/p&gt;

&lt;p&gt;删除array中偶数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = [1, 2, 4, 5, 6, 9, 10, 15];
var r = arr.filter(function (x) {
    return x % 2 !== 0;
});
r; // [1, 5, 9, 15]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;删除array中空字符串：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = ['A', '', 'B', null, undefined, 'C', '  '];
var r = arr.filter(function (s) {
    return s &amp;amp;&amp;amp; s.trim(); // 注意：IE9以下的版本没有trim()方法
});
r; // ['A', 'B', 'C']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;回调函数&quot;&gt;回调函数&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = ['A', 'B', 'C'];
var r = arr.filter(function (element, index, self) {
    console.log(element); // 依次打印'A', 'B', 'C'
    console.log(index); // 依次打印0, 1, 2
    console.log(self); // self就是变量arr
    return true;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;去除array重复元素：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var
    r,
    arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];
r = arr.filter(function (element, index, self) {
    return self.indexOf(element) === index;
});

console.log(r.toString());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sort&quot;&gt;sort&lt;/h3&gt;

&lt;p&gt;通常规定，对于两个元素x和y，如果认为x &amp;lt; y，则返回-1，如果认为x == y，则返回0，如果认为x &amp;gt; y，则返回1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 看上去正常的结果:
['Google', 'Apple', 'Microsoft'].sort(); // ['Apple', 'Google', 'Microsoft'];

// apple排在了最后:
['Google', 'apple', 'Microsoft'].sort(); // ['Google', 'Microsoft&quot;, 'apple']

// 无法理解的结果(这里是个坑):
[10, 20, 1, 2].sort(); // [1, 10, 2, 20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个排序把apple排在了最后，是因为字符串根据ASCII码进行排序，而小写字母a的ASCII码在大写字母之后。&lt;/p&gt;

&lt;p&gt;第三个排序结果是什么鬼？简单的数字排序都能错？&lt;/p&gt;

&lt;p&gt;这是因为Array的sort()方法默认把所有元素先转换为String再排序，结果’10’排在了’2’的前面，因为字符’1’比字符’2’的ASCII码小。&lt;/p&gt;

&lt;p&gt;要按数字大小排序，我们可以这么写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var arr = [10, 20, 1, 2];
arr.sort(function (x, y) {
    if (x &amp;lt; y) {
        return -1;
    }
    if (x &amp;gt; y) {
        return 1;
    }
    return 0;
});
console.log(arr); // [1, 2, 10, 20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;详情可参考如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000&quot;&gt;廖雪峰js教程&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/04/15/higher_order_functions/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/04/15/higher_order_functions/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/04/15/higher_order_functions/</guid>
        
        <category>js基础篇</category>
        
        
      </item>
    
      <item>
        <title>互联网寒冬中程序员该如何谨慎选择公司？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;知乎live模块, 内容来自我听过的live，摘取主要内容，语音转化文字，偏口语化&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;互联网寒冬中程序员该如何谨慎选择公司&quot;&gt;互联网寒冬中程序员该如何谨慎选择公司？&lt;/h2&gt;

&lt;h3 id=&quot;live-简介&quot;&gt;Live 简介&lt;/h3&gt;

&lt;p&gt;本期 Live 从时间上来说，带给大家的目的非常明确了，在 2019 年「金三银四」的跳槽季中，作为码农而言，很多人可能只看到公司的薪酬待遇的福利，却往往忽略了技术环境、成长方向、期股权结构、盈利能力等等。正可谓面试是相互的，当公司在面你的时候，你也在面公司，所以本期 Live 会给大家做一个指导性的分享，在面试前、中、后三个不同阶段该如何了解到你所想去的公司的更多背景。毕竟年轻的岁月并不多，如果在一家公司被坑，那可能就会比别人多走两年弯路；如果选择得当，还有可能弯道超车，在初创公司中赶超大厂的同学。&lt;/p&gt;

&lt;h3 id=&quot;内容大纲&quot;&gt;内容大纲&lt;/h3&gt;

&lt;p&gt;一、个人经历分享
a)	学习生涯：信息学竞赛与 ACM 的竞赛之路，本科毕业自学 Python 与机器学习算法；
b)	初创公司：从后端研发转算法，经历电商、互联网广告、互联网金融三大领域的算法开发；
c)	大厂（阿里）：专注于电商交易安全，保护消费者及商家权利，在电商反作弊中应用算法能力。&lt;/p&gt;

&lt;p&gt;二、初创公司与大厂利弊分析
a)	个人发展环境：就两者的发展广度与深度做比较
b)	公司稳定性：初创公司相对比较难判断是否靠谱
c)	薪资体系：短期内可能初创公司会给出更好的薪酬&lt;/p&gt;

&lt;p&gt;三、如何理性地做出适合自己的选择
a)	面试前：估值、舆情、CEO 背景、盈利情况
b)	面试中：辨别初创公司的「画大饼」、了解技术氛围
c)	面试后：现金、福利、期股权、KPI&lt;/p&gt;

&lt;h3 id=&quot;主讲人介绍&quot;&gt;主讲人介绍&lt;/h3&gt;

&lt;p&gt;SimonS（编程话题优秀回答者）&lt;/p&gt;

&lt;p&gt;我是 SimonS ，知乎 45K 粉丝大透明一枚，编程话题优秀回答者，历史 Live 听众数逾两万。小学接触编程学习，初中自主创站，高中开始长达七年的 OI / ACM 竞赛，本科毕业后有六年计算广告及风控征信相关机器学习工作经历。6 年工作中共经历过 4 家公司，除了目前所在的阿里外，其余初创公司在入职时均未超过 C 轮，而后都有较快速的成长。曾合伙创办公司担任算法技术总监，负责广告精准投放及商业智能相关工作，现任阿里巴巴集团 CRO 线安全专家，负责正向交易全链路风控相关算法及策略研发。&lt;/p&gt;

&lt;h3 id=&quot;正文内容摘录&quot;&gt;正文内容摘录&lt;/h3&gt;

&lt;h4 id=&quot;1个人经历分享&quot;&gt;1.个人经历分享&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/zhihu/zhihu-live/internet_winter/internet_winter_01.jpg&quot; alt=&quot;个人经历&quot; /&gt;&lt;/p&gt;

&lt;p&gt;个人简介略过&lt;/p&gt;

&lt;h4 id=&quot;2初创公司与大厂的利弊分析&quot;&gt;2.初创公司与大厂的利弊分析&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/zhihu/zhihu-live/internet_winter/internet_winter_02.jpg&quot; alt=&quot;初创 or 大厂&quot; /&gt;&lt;/p&gt;

&lt;p&gt;扪心自问，是否自认为自己能力 &lt;strong&gt;很强&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果很强则推荐去初创公司，因为每一家大厂都有差不多规范的代码和守则，但是每家初创公司有很多的坑留着让你去踩。想一想，该怎么在踩坑和填坑中让自己成长。&lt;/p&gt;

&lt;p&gt;很多人吐槽玩一家初创公司就急急忙忙跳到另一家公司，接着会发现另一家公司的坑更大，相对而言大厂没有这么需要顾虑的点，虽然有很多的办公室政治，但是基本我们不会涉及到，在大厂能够按部就班的安稳成长。
出来之后能够得到大厂镀金的凭证，也能更帮助自己找到下一家公司，有更多的资本和HR谈薪酬待遇方面内容。&lt;/p&gt;

&lt;p&gt;首先强调个人发展，对于工龄未满五年的新同学，不要把钱看得太重，把个人发展放在第一位。
初创公司和大厂有着截然不同的发展方向。对于有能力的人来说，在初创公司能得到全方位的发展，可以向全栈工程师发展。对于没有能力的人来说，在初创公司可能就是到处打杂。&lt;/p&gt;

&lt;p&gt;有能力的人能够在大厂里面找到一个能带自己深耕的大牛，对于一个没有能力的人来说就是在一个岗位上拧螺丝了，可以看出有能力的人，在初创公司能够承担更大的责任，对于成长而言也能有更大的提升，能力不那么强的人而言。能力不那么强的人就是大树底下好乘凉选择大厂更稳妥一些。&lt;/p&gt;

&lt;p&gt;从稳定性来说，初创公司考虑，B轮/已有100人以上，会有较为稳定的盈利点，受资方青睐的点，资金流不会太紧张，也保留了初创公司 短平快 的自由度。&lt;/p&gt;

&lt;p&gt;有光环也就是有大厂经验的可以去初创公司提升自己，没有光环的可以早点去大厂历练。&lt;/p&gt;

&lt;p&gt;对大部分人的建议还是去大厂，大厂更安稳。&lt;/p&gt;

&lt;p&gt;但是不乐观的是，high count(人员配额)一直在缩，只有等老员工离职了，才会招新人代替，相应的门槛也会变高。&lt;/p&gt;

&lt;p&gt;学会包装自己&lt;/p&gt;

&lt;h4 id=&quot;3面试前评估&quot;&gt;3.面试前评估&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/zhihu/zhihu-live/internet_winter/internet_winter_03.jpg&quot; alt=&quot;面试前评估&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单讲就是 &lt;strong&gt;谨慎&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;面试分为前中后三个部分&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;估值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上市公司：看最近几期的财报 
查看公司整体是否在健康发展，知道哪些业务是公司的核心，哪些业务一直在烧钱。尽量避开一直在烧钱的业务，可能有二次面试转岗或者被裁员的风险&lt;/p&gt;

&lt;p&gt;初创公司：看看领导层面，CEO,CTO背景，都是从何来，手里有哪方面的资源。
初创公司最重要的一点就是活下去，能否得到资方的青睐很重要。&lt;/p&gt;

&lt;p&gt;举例：挖财CEO背景还不错，挖财至今活的还不错&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不赚钱的业务尽量不去，发年终奖的时候就能感受到贫富差距&lt;/p&gt;

&lt;p&gt;举例: 阴阳师团队，天美团队年终奖。&lt;/p&gt;

&lt;p&gt;业务赚不赚钱很重要。&lt;/p&gt;

&lt;p&gt;业务决定了收入、发展空间、成就感&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;舆情&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从师兄或者朋友那里了解公司的情况&lt;/p&gt;

&lt;p&gt;可以从一些公关稿当中，了解公司领导的态度，&lt;/p&gt;

&lt;p&gt;举例：阿里月饼门态度&lt;/p&gt;

&lt;p&gt;面试是个互相选择的过程，道不同不相为谋。&lt;/p&gt;

&lt;h4 id=&quot;4-面试中评估&quot;&gt;4. 面试中评估&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/zhihu/zhihu-live/internet_winter/internet_winter_04.jpg&quot; alt=&quot;面试中评估&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如何在面试的过程中去了解公司&lt;/p&gt;

&lt;p&gt;不要按部就班的只是回答面试官的问题，最后也只是问薪资福利，不利于了解公司具体情况。&lt;/p&gt;

&lt;p&gt;怎么了解？&lt;/p&gt;

&lt;p&gt;了解业务，了解公司的业务是怎么运作的，以及未来可能在其中扮演的角色。&lt;/p&gt;

&lt;p&gt;从0-1打拼的业务，会非常累，当时也会有相当丰厚的回报，例如阿里云，菜鸟，钉钉。&lt;/p&gt;

&lt;p&gt;安稳的业务，例如淘宝天猫，相对稳定，不是特别忙碌。在成熟的业务线中，自己的价值观很容易被量化，一般都会有比较大的流量，自己代码优化了多少性能，提升了多少转化都能算的很清楚。&lt;/p&gt;

&lt;p&gt;创业的项目，一定要问，怎么样才能体现自己的价值，别辛辛苦苦干了一年让老板觉得自己没什么价值而被裁掉了。&lt;/p&gt;

&lt;p&gt;问面试官，所在的team的业绩是怎么和业务挂钩的，如果回答模糊，则公司在这方面管理不是很成熟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技术&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个人的技术栈不同，每家公司用的技术栈也都不同。省略&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;薪资，期权&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;总包（packge）= 月薪base数 x 12 + 奖金（年终奖+季度奖）+ 股票（上市公司）/ 期权（初创公司）&lt;/p&gt;

&lt;p&gt;不要把眼光停留在月薪上，越往后月薪越不重要。&lt;/p&gt;

&lt;p&gt;月薪只要能支持自己基本开销就行，在互联网，主要还是看期股权。&lt;/p&gt;

&lt;p&gt;奖金和期股权和业务强相关，业务线非常重要&lt;/p&gt;

&lt;p&gt;期权：未上市的公司，给予员工的股权，不是一次性到手的股权&lt;/p&gt;

&lt;p&gt;公允价 评估 到手的期权价值&lt;/p&gt;

&lt;p&gt;中途离开的时候，已归属的期权是否能够带走，如果被回购，这个价格怎么算的&lt;/p&gt;

&lt;h4 id=&quot;面试后评估&quot;&gt;面试后评估&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/zhihu/zhihu-live/internet_winter/internet_winter_05.jpg&quot; alt=&quot;面试后评估&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到了这一步，一般来说就是庆祝的时候&lt;/p&gt;

&lt;p&gt;务必要尽快做出选择接受的offer，避免被替代&lt;/p&gt;

&lt;p&gt;公司不会在一棵树上吊死，在给你发offer的时候也在不断的面试其他人&lt;/p&gt;

&lt;p&gt;提高自己的决策能力&lt;/p&gt;

&lt;p&gt;评估，和面试中谈的需求是否一致，和直系主管沟通细节&lt;/p&gt;

&lt;p&gt;KPI:&lt;/p&gt;

&lt;p&gt;0-1的业务，初创公司中，老板注重个人平时工作情况，还是最终的产出。&lt;/p&gt;

&lt;p&gt;成熟的业务在这方面不会有太大问题，成熟业务对未来的要求对未来的要求不会特备过分，一般按部就班就能获得平均绩效。仅需关注个人能力，和对KPI的影响度。当然越多越好&lt;/p&gt;

&lt;p&gt;福利：&lt;/p&gt;

&lt;p&gt;缴纳社保的基数，会直接影响公积金的缴纳额，以及公司在当地缴纳公积金的比例。&lt;/p&gt;

&lt;p&gt;年休假随工龄和级别的增长情况&lt;/p&gt;

&lt;p&gt;别老盯着outing, 下午茶这些东西&lt;/p&gt;

&lt;p&gt;所谓寒冬，不是每个人的寒冬，只是淘汰一些不靠谱的公司和不靠谱的业务，以及一些半桶水的程序员，是金子总会发光的。&lt;/p&gt;

&lt;h4 id=&quot;问答环节&quot;&gt;问答环节&lt;/h4&gt;

&lt;p&gt;Q: 跳槽的话，是否需要裸辞&lt;/p&gt;

&lt;p&gt;A: 一般来说还是不建议裸辞，除非跳槽的跨度比较大，比如从前端开发跳到后端数据挖掘方向，这时候可能需要比较久的时间去准备。
另外裸辞的话还是比较影响心态的，因为没有工作，会比较急，然后可能就随便找了家公司，可能等不到自己最满意的offer了。&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/04/14/internet_winter/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/04/14/internet_winter/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/04/14/internet_winter/</guid>
        
        <category>知乎live</category>
        
        
      </item>
    
      <item>
        <title>我在网易做了6年前端，想给求职者4条建议</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;以下来自公众号&lt;code class=&quot;highlighter-rouge&quot;&gt;程序猿&lt;/code&gt;的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NzA1MTcyMA==&amp;amp;mid=2651169300&amp;amp;idx=1&amp;amp;sn=a427ca963c2307abf6db3f8b8f740330&amp;amp;chksm=bd2eee338a596725a9a3445d3c8f4673cc74f43b35a013ec14a403949f620cf68fd35e7786f8&amp;amp;scene=0&amp;amp;xtrack=1#rd&quot;&gt;《我在网易做了6年前端，想给求职者4条建议》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1前端开发工程师薪资数据来自猎聘网&quot;&gt;1.《前端开发工程师薪资》数据来自猎聘网：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/daily_excerpts/salary.png&quot; alt=&quot;前端开发工程师薪资&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-前端知识体系&quot;&gt;2. 前端知识体系：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/daily_excerpts/mind_map.png&quot; alt=&quot;前端知识体系&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-建议&quot;&gt;3. 建议&lt;/h3&gt;

&lt;h4 id=&quot;31-培养编程思想&quot;&gt;3.1 培养编程思想&lt;/h4&gt;

&lt;p&gt;JavaScript是一门面向对象的动态类型语言, &lt;strong&gt;可以使用面向对象语言常用的设计模式的思想开发&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;32-学好原生javascript和es6&quot;&gt;3.2 学好原生JavaScript和ES6&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;闭包、原型&lt;/li&gt;
  &lt;li&gt;DOM API，BOM API&lt;/li&gt;
  &lt;li&gt;作用域&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
  &lt;li&gt;Promise，async await异步操作&lt;/li&gt;
  &lt;li&gt;数组对象新方法&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;33-掌握前端优化技术&quot;&gt;3.3 掌握前端优化技术&lt;/h4&gt;

&lt;p&gt;不仅是做好业务需求的开发，&lt;strong&gt;还要涉及前端工程的优化&lt;/strong&gt;
例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何提高web响应速度?&lt;/li&gt;
  &lt;li&gt;如何加快静态资源的加载?&lt;/li&gt;
  &lt;li&gt;如何提升用户的使用体验？&lt;/li&gt;
  &lt;li&gt;如何更快地解析脚本，尽快处于可工作状态？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;web的优化处理原理和方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;熟练掌握JavaScript的方法和原理&lt;/li&gt;
  &lt;li&gt;熟练掌握tcp，http协议和CDN知识&lt;/li&gt;
  &lt;li&gt;充分了解浏览器的渲染和执行机制&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;34-框架原理&quot;&gt;3.4 框架原理&lt;/h4&gt;

&lt;p&gt;面试官对于框架除了问及API，更关注对于框架底层原理的了解程度&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/04/09/six_year_FE_advise/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/04/09/six_year_FE_advise/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/04/09/six_year_FE_advise/</guid>
        
        <category>日常摘录</category>
        
        
      </item>
    
      <item>
        <title>js基础篇-2.解构赋值</title>
        <description>&lt;h1 id=&quot;js基础查漏补缺&quot;&gt;js基础查漏补缺&lt;/h1&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#js基础查漏补缺&quot;&gt;js基础查漏补缺&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1解构赋值&quot;&gt;1.解构赋值&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#11-使用解构赋值快速获取对象的指定属性&quot;&gt;1.1 使用解构赋值，快速获取对象的指定属性：&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#12-对嵌套对象属性赋值&quot;&gt;1.2 对嵌套对象属性赋值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#13-利用新变量替代属性名&quot;&gt;1.3 利用新变量替代属性名&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#14-使用默认值&quot;&gt;1.4 使用默认值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#15-有时候正确写法报错&quot;&gt;1.5 有时候正确写法报错&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#16-使用场景简化代码&quot;&gt;1.6 使用场景，简化代码&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#交换两个变量值&quot;&gt;交换两个变量值&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#快速获取当前页面的域名和路径&quot;&gt;快速获取当前页面的域名和路径&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#函数接收对象参数直接把对象的属性绑定到变量&quot;&gt;函数接收对象参数，直接把对象的属性绑定到变量&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#最后&quot;&gt;最后&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;1解构赋值&quot;&gt;1.解构赋值&lt;/h2&gt;

&lt;h3 id=&quot;11-使用解构赋值快速获取对象的指定属性&quot;&gt;1.1 使用解构赋值，快速获取对象的指定属性：&lt;/h3&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;var {name, age, passport} = person;&lt;/code&gt;这种写法就源于此&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'use strict';

var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678',
    school: 'No.4 middle school'
};
var {name, age, passport} = person;  // * 这东西原来是es6里面的解构赋值 *

// name, age, passport分别被赋值为对应属性:
console.log('name = ' + name + ', age = ' + age + ', passport = ' + passport); // name = 小明, age = 20, passport = G-12345678

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;12-对嵌套对象属性赋值&quot;&gt;1.2 对嵌套对象属性赋值&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：如果对应的属性不存在，变量将被赋值为undefined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678',
    school: 'No.4 middle school',
    address: {
        city: 'Beijing',
        street: 'No.1 Road',
        zipcode: '100001'
    }
};
var {name, address: {city, zip}} = person;
name; // '小明'
city; // 'Beijing'
zip; // undefined, 因为属性名是zipcode而不是zip
// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:
address; // Uncaught ReferenceError: address is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;13-利用新变量替代属性名&quot;&gt;1.3 利用新变量替代属性名&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678',
    school: 'No.4 middle school'
};

// 把passport属性赋值给变量id:
let {name, passport:id} = person;
name; // '小明'
id; // 'G-12345678'
// 注意: passport不是变量，而是为了让变量id获得passport属性:
passport; // Uncaught ReferenceError: passport is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;14-使用默认值&quot;&gt;1.4 使用默认值&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;主要避免不存在的属性返回undefined&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = {
    name: '小明',
    age: 20,
    gender: 'male',
    passport: 'G-12345678'
};

// 如果person对象没有single属性，默认赋值为true:
var {name, single=true} = person;
name; // '小明'
single; // true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;15-有时候正确写法报错&quot;&gt;1.5 有时候正确写法报错&lt;/h3&gt;

&lt;p&gt;有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 声明变量:
var x, y;
// 解构赋值:
{x, y} = { name: '小明', x: 100, y: 200};
// 语法错误: Uncaught SyntaxError: Unexpected token =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;({x, y} = { name: '小明', x: 100, y: 200});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;16-使用场景简化代码&quot;&gt;1.6 使用场景，简化代码&lt;/h3&gt;

&lt;h4 id=&quot;交换两个变量值&quot;&gt;交换两个变量值&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var x=1, y=2;
[x, y] = [y, x]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;快速获取当前页面的域名和路径&quot;&gt;快速获取当前页面的域名和路径&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var {hostname:domain, pathname:path} = location;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;函数接收对象参数直接把对象的属性绑定到变量&quot;&gt;函数接收对象参数，直接把对象的属性绑定到变量&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function buildDate({year, month, day, hour=0, minute=0, second=0}) {
    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;详情可参考如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/?search=rest&amp;amp;x=0&amp;amp;y=0#docs/destructuring&quot;&gt;es6入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000&quot;&gt;廖雪峰js教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/04/08/Destructuring_assignment/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/04/08/Destructuring_assignment/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/04/08/Destructuring_assignment/</guid>
        
        <category>js基础篇</category>
        
        
      </item>
    
      <item>
        <title>js基础篇-1.Map &amp; Set &amp; 函数定义及调用</title>
        <description>&lt;h1 id=&quot;js基础查漏补缺&quot;&gt;js基础查漏补缺&lt;/h1&gt;
&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#js%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA&quot;&gt;js基础查漏补缺&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-es6-map-set&quot;&gt;1. es6 Map Set&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#11-map&quot;&gt;1.1 Map&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#12-set&quot;&gt;1.2 Set&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8&quot;&gt;2. 函数定义和调用&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#21-arguments%E7%9A%84%E7%94%A8%E5%A4%84&quot;&gt;2.1 arguments的用处&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#22-es6-rest%E5%8F%82%E6%95%B0&quot;&gt;2.2 es6 rest参数&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#23-return-%E7%9A%84%E5%9D%91&quot;&gt;2.3 return 的坑&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E6%9C%80%E5%90%8E&quot;&gt;最后&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;1-es6-map-set&quot;&gt;1. es6 Map Set&lt;/h2&gt;

&lt;h3 id=&quot;11-map&quot;&gt;1.1 Map&lt;/h3&gt;

&lt;p&gt;Api:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;set(key,value)&lt;/li&gt;
  &lt;li&gt;get(key)&lt;/li&gt;
  &lt;li&gt;delete(key)&lt;/li&gt;
  &lt;li&gt;has(key)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
m.get('Michael'); // 95
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var m = new Map(); // 空Map
  m.set('Adam', 67); // 添加新的key-value
  m.set('Bob', 59);
  m.has('Adam'); // 是否存在key 'Adam': true
  m.get('Adam'); // 67
  m.delete('Adam'); // 删除key 'Adam'
  m.get('Adam'); // undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，一个key只能对应一个value，重复会覆盖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var m = new Map();
  m.set('Adam', 67);
  m.set('Adam', 88);
  m.get('Adam'); // 88
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;12-set&quot;&gt;1.2 Set&lt;/h3&gt;

&lt;p&gt;Api:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add(value)：添加某个值，返回 Set 结构本身。&lt;/li&gt;
  &lt;li&gt;delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。&lt;/li&gt;
  &lt;li&gt;has(value)：返回一个布尔值，表示该值是否为Set的成员。&lt;/li&gt;
  &lt;li&gt;clear()：清除所有成员，没有返回值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两种创建方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重复元素自动过滤&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = new Set([1, 2, 3, 3, '3']);
s; // Set {1, 2, 3, &quot;3&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可重复添加，但无效果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s.add(4);
s; // Set {1, 2, 3, 4}
s.add(4);
s; // 仍然是 Set {1, 2, 3, 4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;delete使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = new Set([1, 2, 3]);
s; // Set {1, 2, 3}
s.delete(3);
s; // Set {1, 2}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：在Set中NaN是相等的，=== 时是不对等的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let set = new Set();
let a = NaN;
let b = NaN;
set.add(a);
set.add(b);
set // Set {NaN}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：两个对象总是不相等的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let set = new Set();

set.add({});
set.size // 1

set.add({});
set.size // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/set-map&quot;&gt;详情查看es6入门&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-函数定义和调用&quot;&gt;2. 函数定义和调用&lt;/h2&gt;

&lt;h3 id=&quot;21-arguments的用处&quot;&gt;2.1 arguments的用处&lt;/h3&gt;

&lt;p&gt;当函数没有传入任何参数的时候可以使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function abs() {
    if (arguments.length === 0) {
        return 0;
    }
    var x = arguments[0];
    return x &amp;gt;= 0 ? x : -x;
}

abs(); // 0
abs(10); // 10
abs(-9); // 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// foo(a[, b], c)
// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
function foo(a, b, c) {
    if (arguments.length === 2) {
        // 实际拿到的参数是a和b，c为undefined
        c = b; // 把b赋给c
        b = null; // b变为默认值
    }
    // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-es6-rest参数&quot;&gt;2.2 es6 rest参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(a, b, ...rest) {
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}

foo(1, 2, 3, 4, 5);
// 结果:
// a = 1
// b = 2
// Array [ 3, 4, 5 ]

foo(1);
// 结果:
// a = 1
// b = undefined
// Array []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/?search=rest&amp;amp;x=0&amp;amp;y=0#docs/function#rest-%E5%8F%82%E6%95%B0&quot;&gt;-&amp;gt; es6入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449926746982f181557d9b423f819e89709feabdb4000&quot;&gt;-&amp;gt; 廖雪峰js教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-return-的坑&quot;&gt;2.3 return 的坑&lt;/h3&gt;

&lt;p&gt;JavaScript引擎有一个在行末自动添加分号的机制&lt;/p&gt;

&lt;p&gt;正常编写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
    return { name: 'foo' };
}

foo(); // { name: 'foo' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;坑编写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
    return
        { name: 'foo' };
}

foo(); // undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript引擎在行末自动添加分号后：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
    return; // 自动添加了分号，相当于return undefined;
        { name: 'foo' }; // 这行语句已经没法执行到了
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正确多行写法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo() {
    return { // 这里不会自动加分号，因为{表示语句尚未结束
        name: 'foo'
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/04/04/map_set/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/04/04/map_set/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/04/04/map_set/</guid>
        
        <category>js基础篇</category>
        
        
      </item>
    
      <item>
        <title>移动端，vue+clipboard.js，复制一段密令的文本到剪切板</title>
        <description>&lt;h3 id=&quot;需求&quot;&gt;需求&lt;/h3&gt;

&lt;p&gt;开发过程中遇到的需求需要复制 请求过来的一段密令（类似支付宝淘宝口令）到剪切板。&lt;/p&gt;

&lt;h3 id=&quot;pc端的文本复制到剪切板&quot;&gt;pc端的文本复制到剪切板&lt;/h3&gt;

&lt;p&gt;如果是在pc端的话，可以直接使用原生js进行编写，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;textarea id=&quot;input&quot;&amp;gt;这是被复制的内容&amp;lt;/textarea&amp;gt;
&amp;lt;button onclick=&quot;copyText()&quot;&amp;gt;copy&amp;lt;/button&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    function copyText() {
    	var text = document.getElementById(&quot;text&quot;).innerText;
    	var input = document.getElementById(&quot;input&quot;);
    	input.value = text; // 修改文本框的内容
    	input.select(); // 选中文本
    	document.execCommand(&quot;copy&quot;); // 执行浏览器复制命令
    	alert(&quot;复制成功&quot;);
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是这种方法在移动端会有一些问题，我是在微信公众号开发，发现在微信浏览器中会失效。&lt;/p&gt;

&lt;p&gt;网上搜了下，&lt;code class=&quot;highlighter-rouge&quot;&gt;clipboard.js&lt;/code&gt;是个相对比较靠谱的第三方。&lt;/p&gt;

&lt;h3 id=&quot;clipboardjs&quot;&gt;clipboard.js&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zenorocha/clipboard.js&quot;&gt;官方github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前的star 25k ⭐️&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yunser/p/7628031.html&quot;&gt;大佬的中文翻译&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;概括一下&quot;&gt;概括一下&lt;/h3&gt;

&lt;p&gt;两种方式，一种适合复制固定的文本，另一种适合复制从后端获取的数据文本;&lt;/p&gt;

&lt;h3 id=&quot;具体操作&quot;&gt;具体操作&lt;/h3&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;p&gt;通过npm安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install clipboard --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过script+链接导入,可以去&lt;a href=&quot;https://www.bootcdn.cn/clipboard.js/&quot;&gt;BootCDN&lt;/a&gt;复制个自己想要的&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;如果是vue文件，只需要在相关的组件中进行clipboard.js导入即刻。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Clipboard from &quot;clipboard&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编写需要进行复制的相关代码&lt;/p&gt;

&lt;p&gt;如果是复制固定文本则如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button
    class=&quot;copy-btn&quot;
    @click=&quot;getAnswerNiceName&quot;
    ref=&quot;copy&quot;
    data-clipboard-text=&quot;这是固定的需要被复制到剪切板的内容&quot;
&amp;gt;复制口令&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是复制从服务器获取的数据则如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input
    id=&quot;copy-input&quot;
    readonly  	 //如果在移动端，一定要再input中加上`readonly`属性，否则会拉起手机输入框
/&amp;gt;  			 //这个input可以进行相应的隐藏，例如绝对定位等	
&amp;lt;button
    class=&quot;copy-btn&quot;
    @click=&quot;handleCopy&quot;
    ref=&quot;copy&quot;
    data-clipboard-action=&quot;copy&quot;
    data-clipboard-target=&quot;#copy-input&quot;
&amp;gt;复制口令&amp;lt;/button&amp;gt;

....

methods: {
	handleCopy(){
    	axios.post('请求链接').then(res=&amp;gt;{
        	var input = document.getElementById(&quot;copy-input&quot;);
        	input.value = res.data  	//将获取的数据复制给input
            setTimeout(() =&amp;gt; {
          		const copybtn = this.$refs.copy;
          		this.clipboard = new Clipboard(copybtn);
        	}, 100);  					//利用延时器防止内容没有及时更新等导致报错
        })
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;延时器代码部分，也可以使用vue提供的 &lt;a href=&quot;https://cn.vuejs.org/v2/api/#Vue-nextTick&quot;&gt;nextTick&lt;/a&gt; 方法。 //感谢 Grewer 大佬的评论意见&lt;/p&gt;

&lt;p&gt;使用该方法，会在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.$nextTick(() =&amp;gt; {
    const copybtn = this.$refs.copy;
    this.clipboard = new Clipboard(copybtn);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以做一些复制成功与否的判断：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clipboard.on('success', function(e) {
    console.info('Action:', e.action);
    console.info('Text:', e.text);
    console.info('Trigger:', e.trigger);
    alert('复制成功，您复制的链接为'+e.text);
    e.clearSelection();
});

clipboard.on('error', function(e) {
    console.error('Action:', e.action);
    console.error('Trigger:', e.trigger);
    alert('复制失败')
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这位大佬的demo代码也可以进行参考，亲测有用 -&amp;gt; &lt;a href=&quot;https://blog.csdn.net/qq_33485463/article/details/82899752&quot;&gt;使用clipboard.js实现js复制黏贴的功能&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;可能存在的兼容性问题&quot;&gt;可能存在的兼容性问题&lt;/h4&gt;

&lt;p&gt;网上说这个插件可能存在一些兼容性问题，我自己测试了多个手机，包括安卓和ios，暂时还未发现有兼容问题的存在，如果遇到了我再来及时更新&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2019/03/01/vue_clipboard/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2019/03/01/vue_clipboard/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2019/03/01/vue_clipboard/</guid>
        
        <category>vue</category>
        
        <category>js经验篇</category>
        
        
      </item>
    
      <item>
        <title>Mac OS X中安装命令行工具Command Line Tools</title>
        <description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;喜欢通过终端访问更传统的Unix工具包的Mac用户（大部分是程序员），都会选择安装Xcode IDE的可选命令行工具子部分，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Command Line Tools&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;从MacOS High Sierra，Sierra，OS X El Capitan，Yosemite，Mavericks开始，无需先安装整个Xcode软件包，也无需登录开发人员帐户，就可以单独安装&lt;code class=&quot;highlighter-rouge&quot;&gt;Command Line Tools&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;所以本篇文章适用于MacOS 10.13 High Sierra，10.12 Sierra，OS X 10.11 El Capitan，OS X 10.10 Yosemite和Mac OS X 10.9以及更新版本。&lt;/li&gt;
    &lt;li&gt;运行OS X早期版本的Mac用户可以访问这篇文章&lt;a href=&quot;http://railsapps.github.io/xcode-command-line-tools.html&quot;&gt;Xcode Command Line Tools&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单来讲 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command Line Tools&lt;/code&gt; 就是一个小型独立包，为mac终端用户提供了许多常用的工具，实用程序和编译器。包括svn，git，make，GCC，clang，perl，size，strip，strings，libtool，cpp，what以及其他很多能够在Linux默认安装中找到的有用的命令。&lt;/p&gt;

&lt;p&gt;后面会列出这个工具包中完整的命令列表，也可以自己安装完后亲自查看。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;h3 id=&quot;1启动terminal或者iterm终端&quot;&gt;1.启动terminal或者iterm终端&lt;/h3&gt;

&lt;h3 id=&quot;2输入以下命令字符串&quot;&gt;2.输入以下命令字符串&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会出现以下弹窗，点击安装即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/command/1.png&quot; alt=&quot;插图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3接着会有一个同意服务条款弹出点击同意即可&quot;&gt;3.接着会有一个同意服务条款弹出，点击同意即可&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/command/2.jpeg&quot; alt=&quot;插图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4等待下载&quot;&gt;4.等待下载&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/command/3.jpeg&quot; alt=&quot;插图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5完成安装后会提示安装完成点击安装完成即可&quot;&gt;5.完成安装后会提示安装完成，点击安装完成即可。&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/command/4.jpeg&quot; alt=&quot;插图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6然后可以通过尝试使用刚安装的命令之一来确认是否安装成功例如&quot;&gt;6.然后可以通过尝试使用刚安装的命令之一来确认是否安装成功，例如&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -v
git version
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/command/5.jpeg&quot; alt=&quot;插图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;这个包实际安装在哪&quot;&gt;这个包实际安装在哪&lt;/h2&gt;

&lt;p&gt;如果你对这个包中到底有什么东西感兴趣，可以自己查看这个包中的内容。它安装在mac的根目录中
/Library/Developer/CommandLineTools/&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;注意： 在根/目录下，而不是用户目录~/..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;61个可用的新命令，都在/ Library / Developer / CommandLineTools / usr / bin /中。&lt;/p&gt;

&lt;p&gt;下面按字母顺序列出这些命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ar
as
asa
bison
BuildStrings
c++
c89
c99
cc
clang
clang++
cmpdylib
codesign_allocate
CpMac
cpp
ctags
ctf_insert
DeRez
dsymutil
dwarfdump
dyldinfo
flex
flex++
g++
gatherheaderdoc
gcc
gcov
GetFileInfo
git
git-cvsserver
git-receive-pack
git-shell
git-upload-archive
git-upload-pack
gm4
gnumake
gperf
hdxml2manxml
headerdoc2html
indent
install_name_tool
ld
lex
libtool
lipo
lldb
lorder
m4
make
MergePef
mig
mkdep
MvMac
nasm
ndisasm
nm
nmedit
otool
pagestuff
projectInfo
ranlib
rebase
redo_prebinding
ResMerger
resolveLinks
Rez
RezDet
RezWack
rpcgen
segedit
SetFile
size
SplitForks
strings
strip
svn
svnadmin
svndumpfilter
svnlook
svnrdump
svnserve
svnsync
svnversion
unifdef
unifdefall
UnRezWack
unwinddump
what
xml2man
yacc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考文章：&lt;a href=&quot;http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/&quot;&gt;How to Install Command Line Tools in Mac OS X (Without Xcode)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2018/12/29/Command_Line_Tools/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2018/12/29/Command_Line_Tools/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2018/12/29/Command_Line_Tools/</guid>
        
        <category>Mac环境配置</category>
        
        
      </item>
    
      <item>
        <title>html dom 转化成图片踩坑记（canvas toDataURL）</title>
        <description>&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;

&lt;p&gt;在开发过程中遇到这么一个需求，h5页面需要将一个html dom转化成图片，便于用户保存。&lt;/p&gt;

&lt;h2 id=&quot;面向百度搜索第三方得-html2canvas-和-dom-to-image&quot;&gt;面向百度搜索第三方得 html2canvas 和 dom-to-image&lt;/h2&gt;

&lt;p&gt;两者在写这篇笔记之前在github上的星星数分别是&lt;/p&gt;

&lt;p&gt;dom-to-image  4k ⭐️&lt;/p&gt;

&lt;p&gt;html2canvas 13.7k ⭐️&lt;/p&gt;

&lt;p&gt;两者都有尝试过，都有意想不到的bug，包括&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;部分手机有某些背景图片无法展示，为空白&lt;/li&gt;
  &lt;li&gt;iphone8 plus ios 11中根本不调用这个转换方法，从而得不到想要的图片。
等等&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;自己动手&quot;&gt;自己动手&lt;/h2&gt;

&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;利用canvas的toDataURL来拿到canvas转化的base64码，来替换img的url, 也可以把图片上传到公司的服务器上，得到图片的地址来进行下载，或作为参数来传递&lt;/p&gt;

&lt;p&gt;那么canvas的绘制主要就是文本和图片的绘制,文本绘制相对简单，图片绘制有一些注意点。&lt;/p&gt;

&lt;h3 id=&quot;canvas-初始化&quot;&gt;canvas 初始化&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：由于最后生成的图片可能会模糊，可以尽量画大一点画布，可以按照设计图来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;canvas id=&quot;canvas&quot; width=&quot;750&quot; height=&quot;1164&quot;&amp;gt;
  你的浏览器居然不支持Canvas？！赶快换一个吧！！
&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let c = document.getElementById(&quot;canvas&quot;);
let ctx = c.getContext(&quot;2d&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文本绘制&quot;&gt;文本绘制&lt;/h3&gt;

&lt;h4 id=&quot;官方文档如图1&quot;&gt;官方文档如图1&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/canvas_toDataURL/1.png&quot; alt=&quot;文本绘制&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;详细文档请参考-canvas手册&quot;&gt;详细文档请参考 &lt;a href=&quot;http://www.w3school.com.cn/tags/html_ref_canvas.asp&quot;&gt;canvas手册&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;代码示例&quot;&gt;代码示例&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctx.fillStyle = &quot;#fff&quot;;
ctx.font = &quot;32px PingFangSC-Regular&quot;;
ctx.textAlign = &quot;left&quot;;
ctx.fillText(&quot;这是文本&quot;, 280, 755);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;图片绘制&quot;&gt;图片绘制&lt;/h3&gt;

&lt;h4 id=&quot;官方文档如图2&quot;&gt;官方文档如图2&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/my-blog/img/posts/canvas_toDataURL/2.png&quot; alt=&quot;文本绘制&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;详细文档请参考1-canvas手册&quot;&gt;详细文档请参考1 &lt;a href=&quot;http://www.w3school.com.cn/tags/html_ref_canvas.asp&quot;&gt;canvas手册&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;注意事项&quot;&gt;注意事项&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;图片需要进行跨域处理，否则后期无法生成图片，也就是在img标签中增加crossOrigin属性，值为anonymous&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const instBanner = document.getElementById(&quot;instBanner&quot;);
instBanner.crossOrigin = &quot;anonymous&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;需要等到图片加载完成再画到画布上，否则有可能没画上去&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const posterBg = new Image();
posterBg.src = mainBg;
posterBg.onload = () =&amp;gt; {
  ctx.drawImage(posterBg, 0, 0, 750, 1164);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;完整代码示例&quot;&gt;完整代码示例&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const posterBg = new Image();
posterBg.src = 'https:....'; //这里是图片url
posterBg.crossOrigin = &quot;anonymous&quot;;
posterBg.onload = () =&amp;gt; {
  ctx.drawImage(posterBg, 0, 0, 750, 1164);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;生成图片&quot;&gt;生成图片&lt;/h3&gt;

&lt;h4 id=&quot;替换img-src&quot;&gt;替换img src&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let dataURL = c.toDataURL(&quot;image/png&quot;);
let canvasImg = document.getElementById(&quot;canvasImg&quot;);
canvas.src = dataURL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;上传服务器得到img-url可作为参数保存图片&quot;&gt;上传服务器，得到img url(可作为参数，保存图片)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let dataURL = c.toDataURL(&quot;image/png&quot;);
function getImgUrl(dataURL){
  //一些上传服务器的代码
  return imgUrl
}
let imgUrl = getImgUrl();
let canvasImg = document.getElementById(&quot;canvasImg&quot;);
canvas.src = imgUrl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;最后奉上一些常用的canvas处理方法&quot;&gt;最后奉上一些，常用的canvas处理方法&lt;/h3&gt;

&lt;h4 id=&quot;圆形图片的绘制&quot;&gt;圆形图片的绘制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctx.save();

ctx.beginPath(); //开始绘制
//先画个圆   前两个参数确定了圆心 （x,y） 坐标  第三个参数是圆的半径  四参数是绘图方向  默认是false，即顺时针
ctx.arc(60, 60, 30, 0 * Math.PI, 2 * Math.PI);

ctx.clip();//画好了圆 剪切  原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内 这也是我们要save上下文的原因

ctx.drawImage('https:....', 30, 30, 60, 60);

contex.restore(); //恢复之前保存的绘图上下文 恢复之前保存的绘图上下午即状态 还可以继续绘制
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;圆角矩形绘制&quot;&gt;圆角矩形绘制&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
/**该方法用来绘制圆角矩形 
*@param cxt:canvas的上下文环境 
*@param x:左上角x轴坐标 
*@param y:左上角y轴坐标 
*@param width:矩形的宽度 
*@param height:矩形的高度 
*@param radius:圆的半径 
*@param lineWidth:线条粗细 
*@param strokeColor:线条颜色 
**/  
function strokeRoundRect(cxt,x,y,width,height,radius,/*optional*/lineWidth,/*optional*/strokeColor){  
    //圆的直径必然要小于矩形的宽高          
    if(2*radius&amp;gt;width || 2*radius&amp;gt;height){return false;}  
      
    cxt.save();  
    cxt.translate(x,y);  
    //绘制圆角矩形的各个边  
    drawRoundRectPath(cxt,width,height,radius);  
    cxt.lineWidth = lineWidth||2;//若是给定了值就用给定的值否则给予默认值2  
    cxt.strokeStyle=strokeColor||&quot;#000&quot;;  
    cxt.stroke();  
    cxt.restore();  
}  

/**该方法用来绘制一个有填充色的圆角矩形 
*@param cxt:canvas的上下文环境 
*@param x:左上角x轴坐标 
*@param y:左上角y轴坐标 
*@param width:矩形的宽度 
*@param height:矩形的高度 
*@param radius:圆的半径 
*@param fillColor:填充颜色 
**/
function fillRoundRect(cxt,x,y,width,height,radius,/*optional*/fillColor){  
    //圆的直径必然要小于矩形的宽高          
    if(2*radius&amp;gt;width || 2*radius&amp;gt;height){return false;}  
      
    cxt.save();  
    cxt.translate(x,y);  
    //绘制圆角矩形的各个边  
    drawRoundRectPath(cxt,width,height,radius);  
    cxt.fillStyle=fillColor||&quot;#000&quot;;//若是给定了值就用给定的值否则给予默认值  
    cxt.fill();  
    cxt.restore();  
}  

function drawRoundRectPath(cxt,width,height,radius){  
    cxt.beginPath(0);  
    //从右下角顺时针绘制，弧度从0到1/2PI  
    cxt.arc(width-radius,height-radius,radius,0,Math.PI/2);  
  
    //矩形下边线  
    cxt.lineTo(radius,height);  
  
    //左下角圆弧，弧度从1/2PI到PI  
    cxt.arc(radius,height-radius,radius,Math.PI/2,Math.PI);  
  
    //矩形左边线  
    cxt.lineTo(0,radius);  
  
    //左上角圆弧，弧度从PI到3/2PI  
    cxt.arc(radius,radius,radius,Math.PI,Math.PI*3/2);  
  
    //上边线  
    cxt.lineTo(width-radius,0);  
  
    //右上角圆弧  
    cxt.arc(width-radius,radius,radius,Math.PI*3/2,Math.PI*2);  
  
    //右边线  
    cxt.lineTo(width,height-radius);  
    cxt.closePath();  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;

&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2018/10/09/canvas_toDataURL/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2018/10/09/canvas_toDataURL/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2018/10/09/canvas_toDataURL/</guid>
        
        <category>HTML5</category>
        
        <category>js经验篇</category>
        
        
      </item>
    
      <item>
        <title>个推二面以及其他笔试面试题目（大致）</title>
        <description>&lt;h1 id=&quot;20171108-个推二面&quot;&gt;2017/11/08 （个推二面）&lt;/h1&gt;
&lt;h2 id=&quot;前端知识&quot;&gt;前端知识&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;框架angular，有用到angular的一些什么功能&lt;/li&gt;
  &lt;li&gt;flex布局兼容性&lt;/li&gt;
  &lt;li&gt;数组去重方法 √&lt;/li&gt;
  &lt;li&gt;跨域问题 √&lt;/li&gt;
  &lt;li&gt;本地存储，cookie安全性 √&lt;/li&gt;
  &lt;li&gt;怎么定义声明一个json&lt;/li&gt;
  &lt;li&gt;阻止冒泡中stopPropagation和preventDefault区别 √&lt;/li&gt;
  &lt;li&gt;你知道哪些js事件&lt;/li&gt;
  &lt;li&gt;事件委托&lt;/li&gt;
  &lt;li&gt;一道css float题目 呈现什么效果
```&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
.float-box.left{
    float:left;
}
.float-box.right{
    float:right;
}
&lt;/style&gt;

&lt;div class=&quot;float-box&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;靠左边浮动&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;靠右边浮动&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-box&quot;&gt;
    &lt;div&gt;底部box&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;计算机基础&quot;&gt;计算机基础&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;冒泡排序&lt;/li&gt;
  &lt;li&gt;数组链表&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;看到媒体查询，问了下媒体查询&lt;/li&gt;
  &lt;li&gt;看到官网，问了下是响应式的吗，上线了没， 我说那个商城是响应式的，然后问了商城中购物车怎么实现的&lt;/li&gt;
  &lt;li&gt;职业规划&lt;/li&gt;
  &lt;li&gt;什么时候接触前端的&lt;/li&gt;
  &lt;li&gt;最后有什么问题要问我们的吗&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最后逻辑题&quot;&gt;最后逻辑题&lt;/h2&gt;
&lt;h3 id=&quot;一块砖头能干什么&quot;&gt;一块砖头能干什么？&lt;/h3&gt;

&lt;h1 id=&quot;20171110-杭州对的人信息科技有限公司&quot;&gt;2017/11/10 （杭州对的人信息科技有限公司）&lt;/h1&gt;
&lt;h2 id=&quot;前端基础知识&quot;&gt;前端基础知识&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;只用一个div怎么画一个矩形，矩形右上角为一个圆&lt;/li&gt;
  &lt;li&gt;要是想要让这个圆在矩形的中间（居中问题）&lt;/li&gt;
  &lt;li&gt;怎么画一个梯形&lt;/li&gt;
  &lt;li&gt;amd cmd&lt;/li&gt;
  &lt;li&gt;拖拽事件的实现&lt;/li&gt;
  &lt;li&gt;有哪些鼠标事件&lt;/li&gt;
  &lt;li&gt;事件中有哪些有冒泡&lt;/li&gt;
  &lt;li&gt;一个输入框，从鼠标移入，然后点击输入框，再移出输入框，期间发生了哪些事件，按顺序说&lt;/li&gt;
  &lt;li&gt;事件委托&lt;/li&gt;
  &lt;li&gt;怎么解决页面首次加载，:hover改变图片闪白bug&lt;/li&gt;
  &lt;li&gt;雪碧图是怎么制作的，雪碧图，svg一键生成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其他-1&quot;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在做官网项目时有遇到什么问题&lt;/li&gt;
  &lt;li&gt;wow.js是干什么的&lt;/li&gt;
  &lt;li&gt;对webpack有了解吗&lt;/li&gt;
  &lt;li&gt;用gulp做过哪些事&lt;/li&gt;
  &lt;li&gt;angular单页面的具体实现方式&lt;/li&gt;
  &lt;li&gt;用过react吗&lt;/li&gt;
  &lt;li&gt;require.js&lt;/li&gt;
  &lt;li&gt;c3.js，D3.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;20171111-小麦助教&quot;&gt;2017/11/11 (小麦助教)&lt;/h1&gt;
&lt;h2 id=&quot;前端基础知识-1&quot;&gt;前端基础知识&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;浏览器渲染页面过程中发生了什么&lt;/li&gt;
  &lt;li&gt;跨域问题&lt;/li&gt;
  &lt;li&gt;get与post区别&lt;/li&gt;
  &lt;li&gt;状态码500,400&lt;/li&gt;
  &lt;li&gt;localstorage的定义以及api，怎么删除单条数据&lt;/li&gt;
  &lt;li&gt;axios与ajax区别&lt;/li&gt;
  &lt;li&gt;jQuery中$.fn是什么意思&lt;/li&gt;
  &lt;li&gt;原型链&lt;/li&gt;
  &lt;li&gt;出了一道手写编程，一个数列，1,1,2,3,5,8,13,21…,计算第100位是什么数字&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其他-2&quot;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;快速排序&lt;/li&gt;
  &lt;li&gt;进程与线程&lt;/li&gt;
  &lt;li&gt;promise&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;
&lt;p&gt;感谢各位大佬的参阅，如果有什么问题都可以在评论区提出。&lt;/p&gt;

&lt;p&gt;如果觉得对您有帮助的话，也可点个赞，点个收藏，点关注不迷路。&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog&quot;&gt;周鹏的博客&lt;/a&gt; » &lt;a href=&quot;https://ttypzhoupeng.github.io/my-blog/2018/09/10/other_interview/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/my-blog/2018/09/10/other_interview/</link>
        <guid isPermaLink="true">http://localhost:4000/my-blog/2018/09/10/other_interview/</guid>
        
        <category>笔试面试</category>
        
        
      </item>
    
  </channel>
</rss>
